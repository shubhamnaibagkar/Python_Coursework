import tkinter as tk
import secrets
import string
import pyperclip
import json
from abc import ABC, abstractmethod


# Singleton Pattern
class Config:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(Config, cls).__new__(cls)
            cls._instance.settings = {
                "length": 12,
                "uppercase": True,
                "lowercase": True,
                "digits": True,
                "special": True,
            }
        return cls._instance

    def save_settings(self, filename):
        with open(filename, 'w') as file:
            json.dump(self.settings, file)

    def load_settings(self, filename):
        try:
            with open(filename, 'r') as file:
                self.settings = json.load(file)
        except FileNotFoundError:
            pass


# Abstract Factory Pattern
class PasswordFactory(ABC):
    @abstractmethod
    def create_password(self, length, include_uppercase, include_lowercase, include_digits, include_special):
        pass


class RandomPasswordFactory(PasswordFactory):
    def create_password(self, length, include_uppercase, include_lowercase, include_digits, include_special):
        character_sets = ""
        if include_uppercase:
            character_sets += string.ascii_uppercase
        if include_lowercase:
            character_sets += string.ascii_lowercase
        if include_digits:
            character_sets += string.digits
        if include_special:
            character_sets += string.punctuation

        if not character_sets:
            raise ValueError("No character sets selected")

        return ''.join(secrets.choice(character_sets) for _ in range(length))


class PasswordGeneratorApp:
    def __init__(self, master):
        self.master = master
        master.title("Password Generator")

        # Styling
        self.master.configure(bg="#f0f0f0")
        self.master.geometry("400x300")
        self.master.resizable(False, False)

        self.config = Config()

        # Title Label
        self.title_label = tk.Label(master, text="Password Generator", bg="#f0f0f0", font=("Helvetica", 18, "bold"))
        self.title_label.grid(row=0, column=0, columnspan=2, pady=(20, 10))

        # Password Length Label and Entry
        self.length_label = tk.Label(master, text="Password Length:", bg="#f0f0f0", font=("Helvetica", 12))
        self.length_label.grid(row=1, column=0, padx=10, pady=5, sticky="e")
        self.length_entry = tk.Entry(master, font=("Helvetica", 12), width=5)
        self.length_entry.grid(row=1, column=1, pady=5, sticky="w")
        self.length_entry.insert(tk.END, str(self.config.settings['length']))  # Default length

        # Checkboxes Frame
        self.checkboxes_frame = tk.Frame(master, bg="#f0f0f0")
        self.checkboxes_frame.grid(row=2, column=0, columnspan=2, pady=(10, 5), sticky="w")

        # Checkboxes
        self.uppercase_var = tk.IntVar(value=int(self.config.settings['uppercase']))
        self.lowercase_var = tk.IntVar(value=int(self.config.settings['lowercase']))
        self.digits_var = tk.IntVar(value=int(self.config.settings['digits']))
        self.special_var = tk.IntVar(value=int(self.config.settings['special']))

        self.uppercase_check = tk.Checkbutton(self.checkboxes_frame, text="Uppercase Letters", variable=self.uppercase_var, bg="#f0f0f0", font=("Helvetica", 10))
        self.uppercase_check.pack(anchor="w")
        self.lowercase_check = tk.Checkbutton(self.checkboxes_frame, text="Lowercase Letters", variable=self.lowercase_var, bg="#f0f0f0", font=("Helvetica", 10))
        self.lowercase_check.pack(anchor="w")
        self.digits_check = tk.Checkbutton(self.checkboxes_frame, text="Digits", variable=self.digits_var, bg="#f0f0f0", font=("Helvetica", 10))
        self.digits_check.pack(anchor="w")
        self.special_check = tk.Checkbutton(self.checkboxes_frame, text="Special Characters", variable=self.special_var, bg="#f0f0f0", font=("Helvetica", 10))
        self.special_check.pack(anchor="w")

        # Generate Password Button
        self.generate_button = tk.Button(master, text="Generate Password", command=self.generate_password, bg="black", fg="white", font=("Helvetica", 12), relief=tk.FLAT)
        self.generate_button.grid(row=3, column=0, padx=(10, 5), pady=(10, 5), ipadx=10, sticky="ew")

        # Copy Password Button
        self.copy_button = tk.Button(master, text="Copy Password", command=self.copy_password, bg="black", fg="white", font=("Helvetica", 12), relief=tk.FLAT)
        self.copy_button.grid(row=3, column=1, padx=(5, 10), pady=(10, 5), ipadx=10, sticky="ew")
        self.copy_button.config(state=tk.DISABLED)

        # Result Label
        self.result_label = tk.Label(master, text="", bg="#f0f0f0", font=("Helvetica", 12))
        self.result_label.grid(row=4, column=0, columnspan=2, padx=10, pady=(0, 5), sticky="w")

    def generate_password(self):
        try:
            length = int(self.length_entry.get())
        except ValueError:
            self.result_label.config(text="Please enter a valid number for password length.")
            return

        if length < 8:
            self.result_label.config(text="Password length must be at least 8 characters.")
            return

        try:
            password = RandomPasswordFactory().create_password(
                length,
                bool(self.uppercase_var.get()),
                bool(self.lowercase_var.get()),
                bool(self.digits_var.get()),
                bool(self.special_var.get())
            )
        except ValueError as e:
            self.result_label.config(text=str(e))
            return

        self.result_label.config(text=f"Generated Password: {password}")
        self.copy_button.config(state=tk.NORMAL)
        self.generated_password = password

        # Save settings
        self.config.settings['length'] = length
        self.config.settings['uppercase'] = bool(self.uppercase_var.get())
        self.config.settings['lowercase'] = bool(self.lowercase_var.get())
        self.config.settings['digits'] = bool(self.digits_var.get())
        self.config.settings['special'] = bool(self.special_var.get())
        self.config.save_settings('config.json')

    def copy_password(self):
        pyperclip.copy(self.generated_password)
        self.result_label.config(text="Password copied to clipboard!")


def main():
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()
